// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dsbasko/pass-keeper/internal/server/service/auth (interfaces: Mutator)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/auth-mutator.go -package=auth_service_mock github.com/dsbasko/pass-keeper/internal/server/service/auth Mutator
//

// Package auth_service_mock is a generated GoMock package.
package auth_service_mock

import (
	context "context"
	reflect "reflect"

	model "github.com/dsbasko/pass-keeper/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMutator is a mock of Mutator interface.
type MockMutator struct {
	ctrl     *gomock.Controller
	recorder *MockMutatorMockRecorder
}

// MockMutatorMockRecorder is the mock recorder for MockMutator.
type MockMutatorMockRecorder struct {
	mock *MockMutator
}

// NewMockMutator creates a new mock instance.
func NewMockMutator(ctrl *gomock.Controller) *MockMutator {
	mock := &MockMutator{ctrl: ctrl}
	mock.recorder = &MockMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutator) EXPECT() *MockMutatorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMutator) CreateUser(arg0 context.Context, arg1, arg2 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMutatorMockRecorder) CreateUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMutator)(nil).CreateUser), arg0, arg1, arg2)
}
